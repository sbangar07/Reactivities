{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/commentStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetaledHeader.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","JSON","parse","error","status","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","toast","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","a","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","CommentStore","comments","hubConnection","createHubConnection","activityId","activityStore","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","CommonStore","window","localStorage","getItem","appLoaded","setToken","setAppLoaded","setItem","removeItem","ModalStore","modal","open","openModal","content","closeModal","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","followingCount","loadFollowings","loadUserActivities","UserStore","creds","modalStore","logout","getUser","name","profileStore","commentStore","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","List","horizontal","map","Popup","hoverable","trigger","circular","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","useHistory","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","verticalAlign","relaxed","divided","ribbon","Extra","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","TestErrors","widths","baseUrl","primary","NotFound","Inline","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderColor","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","container","document","getElementById","createRoot","Provider"],"mappings":"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","file":"static/js/main.8d8989af.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers!.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response! as AxiosResponse;\r\n    switch (status) {\r\n        case 400:\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n  }\r\n\r\n  export class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n      if (activity) {\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.venue = activity.venue;\r\n        this.city = activity.city;\r\n      }\r\n    }\r\n  }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    } \r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                } \r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n    \r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {   \r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    } \r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} exact to='/' header>\r\n                    <img src='/assets/logo.png' alt='logo' style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \r\n                                text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activites' \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\" \r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\" \r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}    \r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date: any) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image size='mini' circular src={attendee.image || '/assets/user.png'} />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                    )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { useHistory } from 'react-router-dom';\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    const history = useHistory();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).then(history.push('/activities')).catch(error => \r\n                setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivites' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivites' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login!\r\n                        </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register!\r\n                        </Button>\r\n                        </>\r\n\r\n                    )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category'  name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date'  \r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City'  name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right' \r\n                            positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={loading} onClick={updateAttendance} color='teal'>\r\n                            Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\nimport ActivityDetailedHeader from './ActivityDetaledHeader';\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <h1>error</h1>\r\n            {/* <Header content='Server Error' />\r\n            <Header  />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header  content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment> */}\r\n                \r\n            {/* } */}\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button \r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import React from 'react';\r\nimport {Tab, Grid, Header, Card} from \"semantic-ui-react\";\r\nimport ProfileCard from \"./ProfileCard\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile!.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback((acceptedFiles: any[]) => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n            <input {...getInputProps()} />  \r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        debugger;\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        debugger;\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, \r\n            uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        debugger;\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        debugger;\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile.photos?.map(photo => (\r\n                                    <Card key={photo.id}>\r\n                                        <Image src={photo.url} />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button \r\n                                                    basic\r\n                                                    color='green'\r\n                                                    content='Main'\r\n                                                    name={'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target === 'main' + photo.id && loading}\r\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                />\r\n                                                <Button \r\n                                                    basic \r\n                                                    color='red' \r\n                                                    icon='trash' \r\n                                                    loading={target === photo.id && loading}\r\n                                                    onClick={e => handleDeletePhoto(photo, e)}\r\n                                                    disabled={photo.isMain}\r\n                                                    name={photo.id}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                                ))}\r\n                            </Card.Group>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\r\n    ];\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <>\r\n            <NavBar />\r\n            <Container style={{ marginTop: '7em' }}>\r\n              <Switch>\r\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                <PrivateRoute path='/errors' component={TestErrors} />\r\n                <Route path='/server-error' component={ServerError} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./app/layout/styles.css\";\r\nimport App from \"./app/layout/App\";\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { store, StoreContext } from \"./app/stores/store\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport { Router } from 'react-router-dom';\r\nimport {createBrowserHistory} from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nconst container = document.getElementById(\"root\")!;\r\nconst root = createRoot(container!); // createRoot(container!) if you use TypeScript\r\nroot.render(\r\n<StoreContext.Provider value={store}>\r\n<BrowserRouter>\r\n    <ScrollToTop />\r\n      <App />\r\n    </BrowserRouter>,\r\n  </StoreContext.Provider>\r\n);\r\n\r\n// ReactDOM.render(\r\n//   <StoreContext.Provider value={store}>\r\n//     <BrowserRouter>\r\n//       <App />\r\n//     </BrowserRouter>\r\n//   </StoreContext.Provider>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n// const container = document.getElementById('app');\r\n// const root = createRoot(container); // createRoot(container!) if you use TypeScript\r\n// root.render(<App tab=\"home\" />);\r\n\r\n// const container = document.getElementById('app');\r\n// const root = createRoot(document.getElementById('app')); // createRoot(container!) if you use TypeScript\r\n\r\n// root.render(<StoreContext.Provider value={store}>\r\n//   <BrowserRouter>\r\n//     <App />\r\n//   </BrowserRouter>\r\n// </StoreContext.Provider>);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}